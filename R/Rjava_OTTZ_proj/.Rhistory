CompareTable[j, ] <- c(j, n, l, AvgR) #insert to CompareTable
j = j + 1
break()
}
}
}
max <- which.max(CompareTable[, 4]) #search which K% is best
CompareTable[max, ] #select the best K% from CompareTable
Bests <- CompareTable[max, 2] #pick up best n
Bestl <- CompareTable[max, 3] #pick up best l
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
Bests
Bestl
library(RjavaOTTZ)
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2107.TW&a=00&b=01&c=2013&d=11&e=31&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
rsiTrain <- rsiTraining(TrainData)
rsiTrain
conn<-buildConnection('Leon_Stock_2012_TestDB','Leon','rtdx9900')
TrainData<-getStockDB(conn,'2013-08-01 9:00:00','2013-08-02 10:10:00','2474')
TestData<-getStockDB(conn,'2013-08-06 10:00:00','2013-08-10 10:00:00','2474')
odbcClose(conn)
library("OTTS")
library("RjavaOTTZ")
library("RODBC")
library("DBI")
library("sqldf")
rsiTrain <- rsiTraining(TrainData)
rsiTrain
TrainData
library(RjavaOTTZ)
conn<-buildConnection('Leon_Stock_2012_TestDB','Leon','rtdx9900')
TrainData<-getStockDB(conn,'2013-08-01 9:00:00','2013-08-02 10:10:00','2474')
TestData<-getStockDB(conn,'2013-08-06 10:00:00','2013-08-10 10:00:00','2474')
odbcClose(conn)
rsiTrain <- rsiTraining(TrainData)
odbcClose(conn)
rsiTrain
conn<-buildConnection('Leon_Stock_2012_TestDB','Leon','rtdx9900')
TrainData<-getStockDB(conn,'2013-08-01 9:00:00','2013-08-01 10:00:00','2474')
TestData<-getStockDB(conn,'2013-08-06 10:00:00','2013-08-10 10:00:00','2474')
odbcClose(conn)
rsiTrain <- rsiTraining(TrainData)
rsiTrain
#get DB data
conn<-buildConnection('Leon_Stock_2012_TestDB','Leon','rtdx9900')
TrainData<-getStockDB(conn,'2013-08-01 9:00:00','2013-08-01 9:10:00','2474')
TestData<-getStockDB(conn,'2013-08-06 10:00:00','2013-08-10 10:00:00','2474')
odbcClose(conn)
rsiTrain <- rsiTraining(TrainData)
rsiTrain
#use best n and best K in testdata and check the performance
tryCatch({
final <- OzRsi(Testdata, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
print(buysell)
tryCatch({
final <- OzRsi(Testdata, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
final <- OzRsi(Testdata, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
Bestl<-20
Bests<-5
tryCatch({
final <- OzRsi(Testdata, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
err
ormsg<<-conditionMessage(e)
})
tryCatch({
final <- OzRsi(Testdata, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
final
final <- OzRsi(Testdata, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
tryCatch({
final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
print(buysell)
Bestl<-20
Bests<-5
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
Testdata <- read.csv(TestURL)
tryCatch({
final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
print(buysell)
tryCatch({
final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
tryCatch({
final <- OzRsi(Testdata, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
png('rplot.png',width = 1200, height = 600, units = "px")
plotRSI(Testdata, final)
dev.off()
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2107.TW&a=00&b=01&c=2013&d=11&e=31&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
Bestl<-20
Bests<-5
#use best n and best K in testdata and check the performance
tryCatch({
final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
png('rplot.png',width = 1200, height = 600, units = "px")
plotRSI(Testdata, final)
dev.off()
#plot
png('rplot.png',width = 1200, height = 600, units = "px")
plotRSI(TestData, final)
dev.off()
#get DB data
conn<-buildConnection('Leon_Stock_2012_TestDB','Leon','rtdx9900')
TrainData<-getStockDB(conn,'2013-08-01 9:00:00','2013-08-02 12:00:00','2474')
TestData<-getStockDB(conn,'2013-08-06 10:00:00','2013-08-10 10:00:00','2474')
odbcClose(conn)
Bestl<-20
Bests<-5
tryCatch({
final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
print(buysell)
tryCatch({
final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)
buysell<-final$buysell
mean(rbind(final$r)[, 2])
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
print(buysell)
#plot
png('rplot.png',width = 1200, height = 600, units = "px")
plotRSI(TestData, final)
dev.off()
library(RjavaOTTZ)
#get yahoofinace data
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2107.TW&a=00&b=01&c=2013&d=11&e=31&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
rsiTrain <- rsiTraining(TrainData)
Bests<-15
Bestl<-35
plotUrl<-'D:/capture/testPlot.png'
rsiTrain
rsiTest <- rsiTesting(TestData, Bests,Bestl,ploturl)
rsiTest <- rsiTesting(TestData, Bests,Bestl,plotUrl)
rsiTest
library(RjavaOTTZ)
#get yahoofinace data
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2107.TW&a=00&b=01&c=2013&d=11&e=31&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
Bests<-15
Bestl<-35
plotUrl<-'D:/capture/testPlot.png'
rsiTest <- rsiTesting(TestData, Bests,Bestl,plotUrl)
rsiTest
rsiTest$bestS
rsiTest$bests
names(rsiTest)
rsiTest$revenue
rsiTest$buysell
#get yahoofinace data
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2107.TW&a=00&b=01&c=2013&d=11&e=31&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
rsiTrain <- rsiTraining(TrainData)
nrow(TrainData)
TrainData[1]
TrainData[1,]
View(TrainData)
#get yahoofinace data
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2107.TW&a=00&b=01&c=2013&d=11&e=31&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
View(TrainData)
TrainData[1,]
class(TrainData[1,])
as.character(TrainData[1,])
class(as.character(TrainData[1,]))
class(TrainData[1,])
TrainData[1,]
as.character(TrainData[1,])
#get yahoofinace data
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=00&b=01&c=2013&d=4&e=01&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
TrainData[1,]
as.character(TrainData[1,])
rsiTrain <- rsiTraining(TrainData)
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=00&b=01&c=2013&d=4&e=01&f=2013&g=d" #a and d is month start from 00
TrainData <- read.csv(TrianURL)
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=00&b=01&c=2013&d=4&e=01&f=2013&g=d" #a and d is month start from 00
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
#caculate
tryCatch({
CompareTable <- data.frame(j = NA, n = NA, l = NA, AveReturn = NA) #declare a Table for performance comparison
j <- 1 # to record loop number
Max.l <- setuploop(TrainData) #RSI need to monitor in next 3 days.
Max.n <- 90
Bests <- 0
Bestl <- 0
for (n in seq(3, Max.n, by = 2)){ # Sday start from 3, lag 2
for (l in seq(12, Max.l, by = 3)){ # Lday start from 12, lag 3
repeat{
if (n > l) {break()}
Rsi1 <- try(OzRsi(TrainData, Sday = n, Lday = l),silent = F) #building the model and caculate the averege Revenue
r <- rbind(Rsi1$r)[, 2] #get the revenue list
AvgR <- mean(r) #caculate the averege Revenue
if (is.na(AvgR)) {break()}
CompareTable[j, ] <- c(j, n, l, AvgR) #insert to CompareTable
j = j + 1
break()
}
}
}
max <- which.max(CompareTable[, 4]) #search which K% is best
CompareTable[max, ] #select the best K% from CompareTable
Bests <- CompareTable[max, 2] #pick up best n
Bestl <- CompareTable[max, 3] #pick up best l
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
library("OTTS")
#source('F:/OTTS/R/Oz.R')
if (exists('setuploop')){
}else {
setuploop <- function(x,...)
{
x=x
Max.l <- dim(x)[1]
if ( Max.l > 133)
{
Max.l <- 130
} else {
Max.l <- dim(x)[1]-3
}
Max.l
}
}
#caculate
tryCatch({
CompareTable <- data.frame(j = NA, n = NA, l = NA, AveReturn = NA) #declare a Table for performance comparison
j <- 1 # to record loop number
Max.l <- setuploop(TrainData) #RSI need to monitor in next 3 days.
Max.n <- 90
Bests <- 0
Bestl <- 0
for (n in seq(3, Max.n, by = 2)){ # Sday start from 3, lag 2
for (l in seq(12, Max.l, by = 3)){ # Lday start from 12, lag 3
repeat{
if (n > l) {break()}
Rsi1 <- try(OzRsi(TrainData, Sday = n, Lday = l),silent = F) #building the model and caculate the averege Revenue
r <- rbind(Rsi1$r)[, 2] #get the revenue list
AvgR <- mean(r) #caculate the averege Revenue
if (is.na(AvgR)) {break()}
CompareTable[j, ] <- c(j, n, l, AvgR) #insert to CompareTable
j = j + 1
break()
}
}
}
max <- which.max(CompareTable[, 4]) #search which K% is best
CompareTable[max, ] #select the best K% from CompareTable
Bests <- CompareTable[max, 2] #pick up best n
Bestl <- CompareTable[max, 3] #pick up best l
}, error = function(e) {
errormsg<<-conditionMessage(e)
})
View(TrainData)
debugSource('~/R_project_Leon/Rjava_OTTZ/R/Rjava_OTTZ.R')
debugSource('~/R_project_Leon/Rjava_OTTZ/R/Rjava_OTTZ.R')
rsiTrain <- rsiTraining(TrainData)
rsiTrain <- rsiTraining(TrainData)
library(RjavaOTTZ)
library(RjavaOTTZ)
#get yahoofinace data
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=00&b=01&c=2013&d=4&e=01&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
rsiTrain <- rsiTraining(TrainData)
rsiTrain
TrainURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=00&b=01&c=2013&d=4&e=01&f=2013&g=d" #a and d is month start from 00
TestURL <- "http://ichart.finance.yahoo.com/table.csv?s=2330.TW&a=0&b=1&c=2013&d=11&e=1&f=2013&g=d"
TrainData <- read.csv(TrainURL)
TrainData$Date <- as.POSIXlt(TrainData$Date) #使用finace資料時,日期預設是fact type, 須轉型
TrainData <- TrainData[order(TrainData$Date), ] #使用finace資料時,需經過排序 否則交易可能會顛倒
TestData <- read.csv(TestURL)
TestData$Date <- as.POSIXlt(TestData$Date)
TestData <- TestData[order(TestData$Date), ]
.path.package
.path.package()
library("OTTS")
library("RjavaOTTZ")
library("RODBC")
library("DBI")
library("sqldf")
#get DB data
conn<-buildConnection('Leon_Stock_2012_TestDB','Leon','rtdx9900')
TrainData<-getStockDB(conn,'2013-08-02 9:00:00','2013-08-03 12:00:00','2330')
TestData<-getStockDB(conn,'2013-08-06 10:00:00','2013-08-10 10:00:00','2474')
odbcClose(conn)
filterTrain <- filterTraining(TrainData)
filterTrain
library(RjavaOTTZ)
c(1,2,3)
a<0c(1L10)
a<0c(1:10)
a<c(1:10)
a<-c(1:10)
a
norm(a)
library("OTTS")
library("RjavaOTTZ")
library("RODBC")
library("DBI")
library("sqldf")
#get DB data
conn<-buildConnection('Leon_Stock_2012_TestDB','Leon','rtdx9900')
TrainData<-getStockDB(conn,'2013-08-02 9:00:00','2013-08-03 12:00:00','2330')
TestData<-getStockDB(conn,'2013-08-06 10:00:00','2013-08-10 10:00:00','2474')
odbcClose(conn)
#init
libs <- c("tm","plyr","class")
lapply(libs, require, character.only=TRUE)
#set options
options(stringsAsFactors = FALSE)
#set parameters
candidates <- c("romney","obama")
pathname <- "D:/R_speech_data"
#clean text
cleanCorpus <- function(corpus){
corpus.tmp <- tm_map(corpus, removePunctuation)
corpus.tmp <- tm_map(corpus.tmp, stripWhitespace)
corpus.tmp <- tm_map(corpus.tmp, tolower)
corpus.tmp <- tm_map(corpus.tmp, removeWords, stopwords("english"))
return(corpus.tmp)
}
#build TDM
generateTDM <- function(cand, path){
s.dir <- sprintf("%s/%s", path, cand) #ex: D:/R_speech_data/romney
s.cor <- Corpus(DirSource(directory = s.dir,encoding = "ANSI"))
s.cor.cl <- cleanCorpus(s.cor)
s.tdm <- TermDocumentMatrix(s.cor.cl)
s.tdm <- removeSparseTerms(s.tdm, 0.7)
result <- list(name = cand, tdm=s.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
#attach name
bindCandidateToTDM <- function(tdm){
s.mat <- t(data.matrix(tdm[["tdm"]]))
s.df <- as.data.frame(s.mat,StringsAsFactors = FALSE)
s.df <- cbind(s.df, rep(tdm[["name"]], nrow(s.df)))
colnames(s.df)[ncol(s.df)] <- "targetcandidate"
return(s.df)
}
candTDM <- lapply(tdm,bindCandidateToTDM)
#stack
tdm.stack <- do.call(rbind.fill, candTDM) #rbind.fill將各列組合缺值補NA, 此處do.call同rbind.fill(cnadTDM)?
tdm.stack[is.na(tdm.stack)] <- 0 #NA替換為0
#hold-out
train.idx <- sample(nrow(tdm.stack), ceiling(nrow(tdm.stack) * 0.7))#抽出70% 作為train樣本index
test.idx<- (1:nrow(tdm.stack)) [- train.idx]#排除上列index即為test樣本
candTDM
names(candTDM)
candTDM$tdm
candTDM[1]
candTDM[2]
candTDM[[1]]
view(candTDM[[1]])
Vies(candTDM[[1]])
View(tdm.stack)
View(candTDM[1])
View(candTDM[2])
tdm.cand
# model - KNN
tdm.cand <- tdm.stack[,"targetcandidate"]
tdm.stack.nl <- tdm.stack[, !colnames(tdm.stack) %in% "targetcandidate"]
tdm.cand
tdm.stack
View(tdm.stack)
tdm.stack[,]
View(tdm.stack)
tdm.stack[,candidate]
tdm.stack[,"candidate"]
tdm.stack[,"targetcandidate"]
tdm.stack[,candidate]
View(tdm.stack)
View(tdm.stack)
tdm.stack[,"targetachieve"]
tdm.stack[,"targetact"]
tdm.stack[,!colnames(tdm.stack) %in% "targetcandidate"]
rnorm(19)
dnorm(0.5)
dnorm(01)
dnorm(1)
dnorm(100)
dnorm(90)
dnorm(20)
dnorm(10)
mfrow=c(2,2)
x =mfrow=c(2,2)
x
class(x)
par(mfrow=c(2,2))
curve(dnorm, from=-3,to3)
curve(dnorm, from=-3,to=3)
curve(dnorm, from=-3, to=3)
curve(dnorm)
curve(dnorm(4))
curve(dnorm(5))
punif(9, min=0, max=10)
L2=punif(9, min=0, max=10)
pnorm(2,mean=0,sd=1)
pnorm?
d
?pnorm
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
library(TTR)
library(RjavaOTTZ)
library(devtools)
