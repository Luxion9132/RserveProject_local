{
    "contents" : "\n#param:TrainURL, e.g. \"http://ichart.finance.yahoo.com/table.csv?s=2107.TW&a=00&b=01&c=2013&d=11&e=31&f=2013&g=d\" #a and d is month start from 00\n#return: Bestn, Bestk\n#errormsg, if throw exception\nfilterTraining<- function(TrainData){  \n  \n  #caculat\n  tryCatch({\n    CompareTable <- data.frame(j = NA, n = NA, kp = NA, AveReturn = NA) #declare a Table for performance comparison\n    i <- 0.01 #K% start from 0.001 and increasing by 0.001\n    j <- 1 # to make how many loop it have been done\n    n <- 2 # MA(n) = 5\n    Max.n <- dim(TrainData)[1]\n    Bestn <- 0\n    Bestk <- 0\n    \n    for (n in seq(2, Max.n, by=3)){\n      kp <- 0\n      repeat{\n        kp <- kp + i\n        filter1 <- try(OzFilter(TrainData, nday = n, k = kp),silent = F) #building the filterRules model and caculate the averege Revenue\n        r <- rbind(filter1$r)[, 2] #get the revenue list\n        AvgR <- mean(r) #caculate the averege Revenue\n        if (is.na(AvgR)) {break()}\n        CompareTable[j, ] <- c(j, n, kp, AvgR) #insert to CompareTable\n        j = j + 1\n        if (kp > 0.5) {break()} #stop if K% over 50%\n      }\n      \n    }\n    max <- which.max(CompareTable[, 4]) #search which K% is best\n    CompareTable[max, ] #select the best K% from CompareTable\n    Bestn <- CompareTable[max, 2] #pick up best n\n    Bestk <- CompareTable[max, 3] #pick up bes k\n    if (is.logical(Bestn)) # if no Best n and Best K\n    {Bestn <- 0\n     Bestk <- 0\n    }\n  }, error = function(e) {\n    errormsg<<-conditionMessage(e)\n  })\n  result<- list(Bestn = Bestn, Bestk = Bestk)\n}\n\n#param:TestURL, Bestn, Bestk, plotUrl\n#return: revenue, buysell, final; and it build plotpic in direction like 'D:/Capture'\n#errormsg, if throw exception\nfilterTesting<- function(Testdata, Bestn, Bestk, plotUrl){  \n    \n    final <- OzFilter(Testdata, nday = Bestn, k = Bestk)\n    buysell<-final$buysell\n    \n    #plot testData\n    #png('D:/rplot.png',width = 1200, height = 600, units = \"px\")\n    png(plotUrl,width = 1200, height = 600, units = \"px\")\n    par(mfrow = c(1,1)) #re-set 1*1 plot\n    plotFilter_v2(Testdata, final, Bestn)\n    dev.off() \n  result <- list(revenue = mean(final$r[, 2]), buysell = buysell, final= final, Testdata = Testdata)\n}\n\nplotFilter_v2 <- function(x, object, Bestn)\n{\n  x = x\n  buysell<-as.data.frame(rbind(object$buysell))\n  \n  if (colnames(x)[1] == 'Date') #determine date or mintue data\n  {\n    plot(x[ ,1], x[ ,5], type='l', xlab='Date', ylab='Close Price', las=2 ,main='' )\n    lines(object$mydatadat,SMA(x[ ,5], n = Bestn), col='orangered2')\n    points(as.POSIXlt(buysell$buydate),as.numeric(buysell$buyprice),type = \"p\",col='red',pch=16)\n    points(as.POSIXlt(buysell$selldate),as.numeric(buysell$sellprice),type = \"p\",col='blue3',pch=17)\n    text(as.POSIXlt(buysell$buydate),as.numeric(buysell$buyprice), adj = c(0.5,-1),labels='BUY',col='red')\n    text(as.POSIXlt(buysell$buydate),as.numeric(buysell$buyprice), adj = c(0.5,1.5),labels=as.numeric(as.character(buysell$buyprice)),col='red',font=2)\n    text(as.POSIXlt(buysell$buydate,),as.numeric(buysell$buyprice), adj = c(0.5,3),labels=buysell$buydate,col='red')\n    text(as.POSIXlt(buysell$selldate),as.numeric(buysell$sellprice), adj = c(0.5,-1),labels='SELL',col='blue3')\n    text(as.POSIXlt(buysell$selldate),as.numeric(buysell$sellprice), adj = c(0.5,1.5),labels=as.numeric(as.character(buysell$sellprice)),col='blue3',font=2)\n    text(as.POSIXlt(buysell$selldate),as.numeric(buysell$sellprice), adj = c(0.5,3),labels=buysell$selldate,col='blue3')\n  }else if (colnames(x)[1] == 'DateTime')\n  {\n    plot(x[ ,5], type='l', xlab='DateTime', ylab='Close Price', las=2, xaxt='n' ,main='' )\n    atn <- seq(1, dim(x)[1], by=30) #set up axis gap\n    x[atn, 1]\n    axis(1,at=atn, labels=x[atn, 1],las=1,cex.axis=0.7)\n    buypoint <- match(as.POSIXlt(buysell$buydate),x$DateTime) # match is used to find the rownumber\n    sellpoint <- match(as.POSIXlt(buysell$selldate),x$DateTime) \n    mydatepoint <- match(as.POSIXlt(object$mydatadate),x$DateTime)\n    lines(mydatepoint,SMA(x[ ,5], n = Bestn), col='orangered2')\n    points(buypoint,as.numeric(buysell$buyprice),type = \"p\",col='red',pch=16)\n    points(sellpoint,as.numeric(buysell$sellprice),type = \"p\",col='blue3',pch=17)\n    text(buypoint,as.numeric(buysell$buyprice), adj = c(0.5,-1),labels='BUY',col='red')\n    text(buypoint,as.numeric(buysell$buyprice), adj = c(0.5,1.5),labels=as.numeric(as.character(buysell$buyprice)),col='red',font=2)\n    text(buypoint,as.numeric(buysell$buyprice), adj = c(0.5,3),labels=buysell$buydate,col='red')\n    text(sellpoint,as.numeric(buysell$sellprice), adj = c(0.5,-1),labels='SELL',col='blue3')\n    text(sellpoint,as.numeric(buysell$sellprice), adj = c(0.5,1.5),labels=as.numeric(as.character(buysell$sellprice)),col='blue3',font=2)\n    text(sellpoint,as.numeric(buysell$sellprice), adj = c(0.5,3),labels=buysell$selldate,col='blue3')\n  }else\n    plot(x[ ,5], type='l')\n}\n\nmaTraining <- function(TrainData){\n  if (exists('setuploop')){\n  }else {\n    setuploop <- function(x,...)\n    {\n      x=x\n      Max.l <- dim(x)[1]\n      if ( Max.l > 130)\n      {\n        Max.l <- 130\n      } else {\n        Max.l <- dim(x)[1]\n      }\n      \n      Max.l  \n    }\n  }\n  errormsg<<-0\n  \n  #caculate\n  tryCatch({\n    CompareTable <- data.frame(j = NA, n = NA, l = NA, AveReturn = NA) #declare a Table for performance comparison\n    j <- 1 # to record loop number\n    Max.l <- setuploop(TrainData)\n    Max.n <- 90\n    Bests <- 0\n    Bestl <- 0\n    \n    for (n in seq(3, Max.n, by = 2)){  # Sday start from 3, lag 2\n      for (l in seq(5, Max.l, by = 3)){ # Lday start from 5, lag 3\n        repeat{\n          if (n > l) {break()}\n          ma1 <- try(OzMa(TrainData, Sday = n, Lday = l),silent = F) #building the filterRules model and caculate the averege Revenue\n          r <- rbind(ma1$r)[, 2] #get the revenue list\n          AvgR <- mean(r) #caculate the averege Revenue\n          if (is.na(AvgR)) {break()}\n          CompareTable[j, ] <- c(j, n, l, AvgR) #insert to CompareTable\n          j = j + 1\n          break()\n        }\n      }\n    }\n    max <- which.max(CompareTable[, 4]) #search which K% is best\n    CompareTable[max, ] #select the best K% from CompareTable\n    Bests <- CompareTable[max, 2] #pick up best n\n    Bestl <- CompareTable[max, 3] #pick up best l \n  }, error = function(e) {\n    errormsg<<-conditionMessage(e)\n  })\n  result<- list(Bests = Bests, Bestl = Bestl)\n}\n\nmaTesting <- function(Testdata, Bests, Bestl, plotUrl){  \n  \n  tryCatch({\n    final <- OzMa(Testdata, Sday = Bests, Lday = Bestl)\n    buysell<-as.data.frame(rbind(final$buysell))\n  }, error = function(e) {\n    errormsg<<-conditionMessage(e)\n  })\n\n  png(plotUrl,width = 1200, height = 600, units = \"px\")\n  plotOzMa(Testdata,final)\n  dev.off()\n  result <- list(revenue = mean(final$r[, 2]), buysell = buysell, final= final, Testdata = Testdata)\n}\n\nrsiTraining <- function(TrainData){\n  if (exists('setuploop')){\n  }else {\n    setuploop <- function(x,...)\n    {\n      x=x\n      Max.l <- dim(x)[1]\n      if ( Max.l > 133)\n      {\n        Max.l <- 130\n      } else {\n        Max.l <- dim(x)[1]-4\n      }\n      \n      Max.l  \n    }\n  }\n  \n  errormsg<<-0\n  #caculate\n  tryCatch({\n    CompareTable <- data.frame(j = NA, n = NA, l = NA, AveReturn = NA) #declare a Table for performance comparison\n    j <- 1 # to record loop number\n    Max.l <- setuploop(TrainData) #RSI need to monitor in next 3 days.\n    Max.n <- 90\n    Bests <- 0\n    Bestl <- 0\n    \n    for (n in seq(3, Max.n, by = 2)){ # Sday start from 3, lag 2\n      for (l in seq(12, Max.l, by = 3)){ # Lday start from 12, lag 3\n        repeat{\n          if (n > l) {break()}\n          Rsi1 <- try(OzRsi(TrainData, Sday = n, Lday = l),silent = F) #building the model and caculate the averege Revenue\n          r <- rbind(Rsi1$r)[, 2] #get the revenue list\n          AvgR <- mean(r) #caculate the averege Revenue\n          if (is.na(AvgR)) {break()}\n          CompareTable[j, ] <- c(j, n, l, AvgR) #insert to CompareTable\n          j = j + 1\n          break()\n        }\n      }\n    }\n    max <- which.max(CompareTable[, 4]) #search which K% is best\n    CompareTable[max, ] #select the best K% from CompareTable\n    Bests <- CompareTable[max, 2] #pick up best n\n    Bestl <- CompareTable[max, 3] #pick up best l \n  }, error = function(e) {\n    errormsg<<-conditionMessage(e)\n  })\n  result<- list(Bests = Bests, Bestl = Bestl)\n}\n\nrsiTesting <- function(TestData, Bests, Bestl, plotUrl){\n  #use best n and best K in testdata and check the performance\n  tryCatch({\n    final <- OzRsi(TestData, Sday = Bests, Lday = Bestl)\n    buysell<-final$buysell\n  }, error = function(e) {\n    errormsg<<-conditionMessage(e)\n  })\n\n  #plot\n  png(plotUrl,width = 1200, height = 600, units = \"px\")\n  plotRSI(TestData, final)\n  dev.off()\n  \n  result <- list(revenue = mean(rbind(final$r)[, 2]), buysell = buysell, final= final, Testdata = TestData)\n}",
    "created" : 1455640562708.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3601606086",
    "id" : "4B56897E",
    "lastKnownWriteTime" : 1398439718,
    "path" : "~/R_project_Leon/Rjava/Rjava_OTTZ/R/Rjava_OTTZ.R",
    "project_path" : "R/Rjava_OTTZ.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}